{"version":3,"sources":["App.scss","Recognizer.js","App.js","index.js"],"names":["module","exports","model","a","tf","console","log","getPixel","pixels","size","i","j","preprocess","newSize","kSize","Math","round","retPixels","Array","fill","nearest","halfKSize","kernel","top","max","left","bottom","min","right","numK","avg","k","l","image","predict","as1D","array","preds","prediction","loadModel","App","status","useState","mouseDown","setMouseDown","setPrediction","canvasEl","useRef","handleMouseStop","e","recognizeDigit","current","getContext","getImageData","width","height","data","then","newPrediction","id","className","ref","onMouseDown","ctx","beginPath","lineWidth","lineCap","strokeStyle","styles","primaryColor","onMouseUp","onMouseLeave","onMouseMove","canvasBounds","getBoundingClientRect","mouseX","clientX","mouseY","clientY","lineTo","stroke","onClick","clearRect","href","role","viewBox","xmlns","d","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b26c0fb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"primaryColor\":\"#fae787\"};","import * as tf from \"@tensorflow/tfjs\";\n\nlet model;\nasync function loadModel() {\n    model = await tf.loadLayersModel(\"model/model.json\");\n    console.log(\"MNIST model loaded.\");\n}\nloadModel();\n\nfunction getPixel(pixels, size, i, j) {\n    return pixels[4 * (size * i + j) + 3];\n}\n\n// naive image downsizing algorithm\nfunction preprocess(pixels, size, newSize) {\n    const kSize = Math.round(size / newSize);\n\n    let retPixels = Array(newSize * newSize).fill(0);\n\n    for (let i = 0; i < newSize; i++) {\n        for (let j = 0; j < newSize; j++) {\n            let nearest = {\n                j: Math.round(j * (size / newSize)),\n                i: Math.round(i * (size / newSize)),\n            };\n\n            let halfKSize = Math.round(kSize / 2);\n            let kernel = {\n                top: Math.max(0, nearest.i - halfKSize),\n                left: Math.max(0, nearest.j - halfKSize),\n                bottom: Math.min(size - 1, nearest.i + halfKSize),\n                right: Math.min(size - 1, nearest.j + halfKSize),\n            };\n\n            let numK = 0;\n\n            let avg = 0;\n            for (let k = kernel.top; k <= kernel.bottom; k++) {\n                for (let l = kernel.left; l <= kernel.right; l++) {\n                    avg += getPixel(pixels, size, k, l);\n                    numK++;\n                }\n            }\n            avg /= numK;\n            retPixels[i * newSize + j] = avg;\n        }\n    }\n\n    return tf.tensor4d(retPixels, [1, 28, 28, 1]);\n}\n\nexport default async function recognizeDigit(pixels, size) {\n    if (model == null) return \"loading\";\n    const image = preprocess(pixels, size, 28);\n\n    const preds = await model.predict(image).as1D().array();\n    let prediction = 0;\n    for (let i = 0; i < 10; i++) {\n        if (preds[i] > preds[prediction]) {\n            prediction = i;\n        }\n    }\n\n    return prediction;\n}\n","import React, { useRef, useState } from \"react\";\nimport styles from \"./App.scss\";\nimport recognizeDigit from \"./Recognizer\";\n\nfunction App() {\n    const [mouseDown, setMouseDown] = useState(false);\n    const [prediction, setPrediction] = useState(null);\n\n    const canvasEl = useRef(null);\n\n    function handleMouseStart(e) {\n        setMouseDown(true);\n        const ctx = canvasEl.current.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.lineWidth = 7;\n        ctx.lineCap = \"round\";\n        ctx.strokeStyle = styles.primaryColor;\n    }\n\n    function handleMouseStop(e) {\n        setMouseDown(false);\n\n        const ctx = canvasEl.current.getContext(\"2d\");\n        const imageData = ctx.getImageData(\n            0,\n            0,\n            canvasEl.current.width,\n            canvasEl.current.height\n        );\n        // recognize digit\n        recognizeDigit(\n            imageData.data,\n            canvasEl.current.width,\n            canvasEl.current.height\n        ).then((newPrediction) => {\n            setPrediction(newPrediction);\n        });\n    }\n\n    function handleMouseMove(e) {\n        if (mouseDown) {\n            const canvasBounds = canvasEl.current.getBoundingClientRect();\n\n            const mouseX = e.clientX - canvasBounds.left;\n            const mouseY = e.clientY - canvasBounds.top;\n\n            const ctx = canvasEl.current.getContext(\"2d\");\n            ctx.lineTo(mouseX, mouseY);\n            ctx.stroke();\n        }\n    }\n\n    function handleClear() {\n        setMouseDown(false);\n        setPrediction(null);\n        const ctx = canvasEl.current.getContext(\"2d\");\n\n        ctx.clearRect(0, 0, canvasEl.current.width, canvasEl.current.height);\n    }\n\n    let status;\n    if (prediction != null) {\n        status = (\n            <h1 id=\"prediction\">\n                Did you draw a{prediction == 8 ? \"n \" : \" \"}\n                <span id=\"number\">{prediction}</span>?\n            </h1>\n        );\n    } else status = <h1 id=\"prediction\">Draw a number!</h1>;\n\n    return (\n        <div className=\"app\">\n            <h1 id=\"title\">MNIST Digit Recognizer</h1>\n            <canvas\n                ref={canvasEl}\n                width={200}\n                height={200}\n                onMouseDown={handleMouseStart}\n                onMouseUp={handleMouseStop}\n                onMouseLeave={handleMouseStop}\n                onMouseMove={handleMouseMove}\n            />\n            <button onClick={handleClear}>Clear</button>\n            {status}\n            <a id=\"github\" href=\"https://github.com/jinayjain/\">\n                <svg\n                    role=\"img\"\n                    width=\"2em\"\n                    viewBox=\"0 0 24 24\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <title>GitHub icon</title>\n                    <path d=\"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\" />\n                </svg>\n            </a>\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}